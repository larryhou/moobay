---
layout: post
title: 多设备照片整理工具
date: 2016-12-26T14:02:55+08:00
---

## 序

&nbsp;&nbsp;&nbsp;&nbsp;同一台手机的照片比较好管理，只要定期同步到一个文件夹就可以，并且照片名的序号也是递增的，查看也比较方便。但是如果还有另外一台手机，就会遇到问题：两台手机的序号不匹配，放到同一个文件夹后按名字排序就会比较混乱！常理按创建时间排序就可以解决问题，可是我有强迫症就喜欢文件名排序，并且序号比较高的照片时间上要晚于序号低的，也就是离现在越近，所以就有了这篇文章。

## 实现过程

#### 1. 按拍照时间重命名

通过`bash`里面的`stat`命令可以获取照片的拍照(创建)时间，其中`%B`是文件创建时间、`%N`是文件名，效果如下

```bash
stat -f '%B %N' IMG_14567.MOV
# 1469314806 IMG_14567.MOV
stat -f '%SB %N' -t '%Y-%m-%dT%H:%M:%S %Z' IMG_14567.MOV 
# 2016-07-24T07:00:06 CST IMG_14567.MOV
```

然后使用`sort`命令对第一列进行数值排序，这样就得到了按时间升序排列文件列表，把列表的行号当做照片ID存储即可。

```bash
find . \( -iname '*.JPG' -or -iname '*.MOV' \) | xargs stat -f '%B %N' | sort -n | awk '{
    id = sprintf("%05d", NR)
    system("mv -v "$2" IMG_"id".JPG")
}'
# ./IMG_8363.JPG -> IMG_00090.JPG
```
<!--more-->

#### 2. 按拍照日期归类

有了这些还不够，因为不同手机里面的照片放在一起会很多，如果都放到同一个文件夹，会导致预览图过多而打开缓慢，比较常见的做法是把照片按照日期放到不同的文件夹，下面考虑按照年为单位份文件夹

```bash
function dojob()
{
	mkdir -pv ${2} # 创建年份文件夹
	
	name=$(uuidgen).$(echo ${3} | awk -F'/' '{print $NF}')
	mv -v ${3} ${name} # 防文件覆盖重命名: 9F15DD93-C914-4012-AE17-2A3C67160100.IMG_14567.JPG
	
	id=$(python -c "print '%05d'%(${4})") # 生成照片ID: 00001
	mv -v ${name} ${2}/IMG_${id}.$(echo ${3}|awk -F'.' '{print $NF}') # 同后缀文件命名
}

export -f dojob # 把dojob函数设置为全局函数为子进程调用

find . \( -iname '*.JPG' -or -iname '*.MOV' \) | xargs stat -t '%Y' -f '%B|%SB|%N' | sort -n | awk -F'|' '{system("dojob " $1" "$2" "$3" "NR)}'
```

## 最终工具脚本

有了以上简单分析，最终写了一个完整的工具，支持照片增量维护，并自动把新加的照片分类、重命名，对于我来说帮了大忙，因为我和老婆手机上都拍了好多儿子的照片，通过这个工具整理起来非常方便，直接运行即可。
{% gist 09f04bf8884c0837dea3890988d3486e %}